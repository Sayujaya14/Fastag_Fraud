# -*- coding: utf-8 -*-
"""Fastag_Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1smlS79mJgcBuYqZOY1s7xNBa--9Sytjy
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report, accuracy_score,precision_score,recall_score,f1_score,confusion_matrix
from imblearn.over_sampling import SMOTE

df = pd.read_csv('/content/FastagFraudDetection.csv')
df

df.describe()

df.select_dtypes('number').median()

df.select_dtypes('number').mode().iloc[0]

df.isnull().sum()

df['FastagID'].fillna(df['FastagID'].mode()[0],inplace=True)

df.isnull().sum()

df.info()

df.drop_duplicates(inplace=True)
df

plt.figure(figsize=(8,6))
sns.countplot(df['Fraud_indicator'])
plt.title('Distribution of Fraud Indicator')
plt.xlabel('Fraud Indicator')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df['Transaction_Amount'],bins=30,kde=True)
plt.title('Distribution of Transaction Amounts')
plt.xlabel('Transaction amounts')
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df['Amount_paid'],bins=30,kde=True)
plt.title('Distribution of Amount Paid')
plt.xlabel('Amount Paid')
plt.ylabel('count')
plt.show()

plt.figure(figsize=(8,6))
sns.histplot(df['Vehicle_Speed'],bins=30,kde=True)
plt.title('Distribution of Vehicle Speed')
plt.xlabel('Vehicle Speed')
plt.ylabel('count')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(x='Transaction_Amount',y='Amount_paid',hue='Fraud_indicator',data=df)
plt.title('Transaction Amount vs Amount Paid')

plt.figure(figsize=(10,6))
sns.countplot(x='Vehicle_Type',hue='Fraud_indicator',data=df)
plt.title('Vehicle Type by Fraud Indicator')
plt.show()

plt.figure(figsize=(10,6))
sns.countplot(x='Lane_Type',hue='Fraud_indicator',data=df)
plt.title('Lane Type by Fraud Indicator')
plt.show()

sns.pairplot(df)

df1=df.select_dtypes('number')
df1

df1.corr()

plt.figure(figsize=(10,10))
sns.heatmap(df1.corr(),annot=True)

label_encoders={}
for column in['Vehicle_Type','Lane_Type','Vehicle_Dimensions','Geographical_Location','Vehicle_Plate_Number','Fraud_indicator','FastagID','TollBoothID',]:
  le = LabelEncoder()
  df[column]=le.fit_transform(df[column])
  label_encoders[column]=le

df.head(5)

#convert timestanp column into date time and seprate hour minute and days
df['Timestamp']=pd.to_datetime(df['Timestamp'])
df['Hour']=df['Timestamp'].dt.hour
df['Day']=df['Timestamp'].dt.day
df['Month']=df['Timestamp'].dt.month
df['Weekday']=df['Timestamp'].dt.weekday
df.sample(5)

df.drop(columns=['Transaction_ID','Timestamp'],inplace = True)
df.head()

x=df.drop(columns='Fraud_indicator')
y=df['Fraud_indicator']

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)
x_train , x_test, y_train,y_test

model = LogisticRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)
y_pred

accuracy = accuracy_score(y_test,y_pred)
conf_matrix = confusion_matrix(y_test,y_pred)
precision = precision_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
f1 = f1_score(y_test,y_pred)
print("Logistic Regression Model Results:")
print("Accuracy:", accuracy)
print('confusion Matrix :',conf_matrix)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

from sklearn.tree import DecisionTreeClassifier

model1 = DecisionTreeClassifier()
model1.fit(x_train,y_train)

y_pred1 = model1.predict(x_test)
y_pred1

accuracy1 = accuracy_score(y_test,y_pred1)
accuracy1

accuracy1 = accuracy_score(y_test,y_pred1)
conf_matrix1 = confusion_matrix(y_test,y_pred1)
precision1 = precision_score(y_test,y_pred1)
recall1 = recall_score(y_test,y_pred1)
f11 = f1_score(y_test,y_pred1)
print("Decision Tree Classification Model Results:")
print("Accuracy:", accuracy1)
print('confusion Matrix :',conf_matrix1)
print("Precision:", precision1)
print("Recall:", recall1)
print("F1 Score:", f11)

model2 = RandomForestClassifier()
model2.fit(x_train,y_train)

y_pred2 = model2.predict(x_test)
y_pred2

accuracy2 = accuracy_score(y_test,y_pred2)
accuracy2

accuracy2 = accuracy_score(y_test,y_pred2)
conf_matrix2 = confusion_matrix(y_test,y_pred2)
precision2 = precision_score(y_test,y_pred2)
recall2 = recall_score(y_test,y_pred2)
f12 = f1_score(y_test,y_pred2)
print("Random Forest Classification Model Results:")
print("Accuracy:", accuracy2)
print('confusion Matrix :',conf_matrix2)
print("Precision:", precision2)
print("Recall:", recall2)
print("F1 Score:", f12)

from sklearn.svm import SVC

model3 = SVC()
model3.fit(x_train,y_train)

y_pred3 = model3.predict(x_test)
y_pred3

accuracy3 = accuracy_score(y_test,y_pred3)
accuracy3

accuracy3 = accuracy_score(y_test, y_pred3)
conf_matrix3 = confusion_matrix(y_test, y_pred3)
precision3 = precision_score(y_test, y_pred3)
recall3 = recall_score(y_test, y_pred3)
f13 = f1_score(y_test, y_pred3)
print("SVM Model Results:")
print("Accuracy:", accuracy3)
print("Confusion Matrix:", conf_matrix3)
print("Precision:", precision3)
print("Recall:", recall3)
print("F1 Score:", f13)

from sklearn.naive_bayes import GaussianNB

model4 = GaussianNB()
model4.fit(x_train,y_train)

y_pred4 = model4.predict(x_test)
y_pred4

accuracy4 = accuracy_score(y_test,y_pred4)
accuracy4

accuracy4 = accuracy_score(y_test,y_pred4)
conf_matrix4 = confusion_matrix(y_test,y_pred4)
precision4 = precision_score(y_test,y_pred4)
recall4 = recall_score(y_test,y_pred4)
f14 = f1_score(y_test,y_pred4)
print("Naive Bayes Model Results:")
print("Accuracy:", accuracy4)
print("Confusion Matrix:", conf_matrix4)
print("Precision:", precision4)
print("Recall:", recall4)
print("F1 Score:", f14)

from sklearn.neighbors import KNeighborsClassifier

model5 = KNeighborsClassifier(n_neighbors=3)
model5.fit(x_train, y_train)

y_pred5 = model5.predict(x_test)
y_pred5

accuracy5 = accuracy_score(y_test, y_pred5)
conf_matrix5 = confusion_matrix(y_test, y_pred5)
precision5 = precision_score(y_test, y_pred5)
recall5 = recall_score(y_test, y_pred5)
f15 = f1_score(y_test, y_pred5)
print("KNN Model Results:")
print("Accuracy:", accuracy5)
print("Confusion Matrix:", conf_matrix5)
print("Precision:", precision5)
print("Recall:", recall5)
print("F1 Score:", f15)

model6 = GradientBoostingClassifier()
model6.fit(x_train, y_train)

y_pred6 = model6.predict(x_test)
y_pred6

accuracy6 = accuracy_score(y_test, y_pred6)
conf_matrix6 = confusion_matrix(y_test, y_pred6)
precision6 = precision_score(y_test, y_pred6)
recall6 = recall_score(y_test, y_pred6)
f16 = f1_score(y_test, y_pred6)
print("Gradient Boosting Model Results:")
print("Accuracy:", accuracy6)
print("Confusion Matrix:", conf_matrix6)
print("Precision:", precision6)
print("Recall:", recall6)
print("F1 Score:", f16)